- name: provision aws resources
  hosts: localhost
  remote_user: ubuntu
  vars:
    - region: us-west-2
    - credential_bucket: telemetry-spark-emr
    - credential_object: aggregator_credentials

  tasks:
    - name: fetch db credentials
      s3: bucket={{credential_bucket}} object={{credential_object}} dest={{credential_object}} mode=get

    - name: read db password
      shell: cat {{credential_object}}
      register: result

    - set_fact: db_pass="{{(result.stdout|from_json).password}}"

    - name: create VPC
      ec2_vpc:
        state: present
        cidr_block: 10.10.0.0/16
        resource_tags: { "type": "telemetry", "application": "aggregation_service" }
        region: "{{region}}"
        internet_gateway: yes
        subnets:
          - cidr: 10.10.0.0/24
          - cidr: 10.10.1.0/24
            az: us-west-2a
          - cidr: 10.10.2.0/24
            az: us-west-2b
        route_tables:
          - subnets:
             - 10.10.0.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
          - subnets:
             - 10.10.1.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
          - subnets:
             - 10.10.2.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
        wait: yes
      register: vpc

    - name: create security group for service
      ec2_group:
        name: telemetry-aggregator-service
        description: telemetry aggregation service
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 5000
            to_port: 5000
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        vpc_id: "{{vpc.vpc_id}}"

    - name: get a recent ubuntu AMI
      ec2_ami_search: distro=ubuntu release=utopic store=instance-store region={{region}}
      register: ubuntu_image

    - name: create service instance
      ec2:
        image: "{{ubuntu_image.ami}}"
        region: "{{region}}"
        instance_type: m3.medium
        key_name: mozilla_vitillo
        assign_public_ip: yes
        group: aggregator-service
        instance_tags: { Name: telemetry-aggregate-service, type: telemetry, Owner: rvitillo@mozilla.com }
        exact_count: 1
        count_tag: { Name: telemetry-aggregate-service }
        vpc_subnet_id: "{{vpc.subnets[0].id}}"
        instance_profile_name: telemetry-spark-emr
        wait: yes
      register: ec2

    - name: wait for ssh server to be running
      wait_for: host={{ item.public_dns_name }} port=22 search_regex=OpenSSH
      with_items: ec2.instances

    - name: create security group for elb
      ec2_group:
        name: telemetry-aggregator-elb
        description: telemetry aggregation service elb
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        vpc_id: "{{vpc.vpc_id}}"
      register: elb_group

    - name: setup elb
      ec2_elb_lb:
        name: telemetry-aggregator
        region: "{{region}}"
        state: present
        security_group_ids:
          - "{{elb_group.group_id}}"
        subnets:
          - "{{vpc.subnets[0].id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 5000
          - protocol: https
            load_balancer_port: 443
            instance_protocol: http
            instance_port: 5000
            ssl_certificate_id: "arn:aws:iam::142069644989:server-certificate/exp20180829_star_telemetry_mozilla_org"
        health_check:
          ping_protocol: http
          ping_port: 5000
          ping_path: "/status"
          response_timeout: 50 # seconds
          interval: 60 # seconds
          unhealthy_threshold: 2
          healthy_threshold: 2
      register: elb

    - name: register instance to elb
      ec2_elb:
        ec2_elbs: "{{elb.elb.name}}"
        region: "{{region}}"
        instance_id: "{{item.id}}"
        state: present
        wait: true
      with_items: ec2.tagged_instances
      ignore_errors: yes

    - name: add new instance to the service group
      add_host: hostname={{ item.public_dns_name }} groups=service
      with_items: ec2.tagged_instances

    - name: create or change the db subnet group
      rds_subnet_group:
        region: "{{region}}"
        state: present
        name: telemetry-aggregator
        description: telemetry aggregator
        subnets:
            - "{{vpc.subnets[1].id}}"
            - "{{vpc.subnets[2].id}}"
      register: subnet_group

    - name: create or change the security group for the db
      ec2_group:
        name: telemetry-aggregator-db
        description: telemetry aggregation db
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        vpc_id: "{{vpc.vpc_id}}"
      register: db_group

    - name: create db
      rds:
        region: "{{region}}"
        command: create
        instance_name: telemetry-aggregates
        instance_type: db.m3.xlarge
        db_engine: postgres
        db_name: telemetry
        backup_retention: 3
        publicly_accessible: yes
        size: 250
        username: root
        password: "{{db_pass}}"
        wait: yes
        subnet: telemetry-aggregator
        vpc_security_groups: "{{db_group.group_id}}"

- include: service.yml
